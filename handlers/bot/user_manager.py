import asyncio
import logging
from typing import Dict, List, Optional, Tuple
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import sys
import os
import uuid
from datetime import datetime, timedelta
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from api.users import UsersAPI
from api.squads import SquadsAPI


class UserManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∏—Ö"""
    
    def __init__(self):
        self.current_users: List[dict] = []
        self.current_squads: List[dict] = []
        self.current_page: int = 0
        self.users_per_page: int = 4
        self.last_message_id: Optional[int] = None
        self.last_chat_id: Optional[int] = None
        self.selected_squad_uuid: Optional[str] = None
        self.selected_user: Optional[dict] = None  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.waiting_for_username: bool = False
        self.waiting_for_expire_days: bool = False
        self.waiting_for_traffic_limit: bool = False
        self.waiting_for_description: bool = False
        self.waiting_for_email: bool = False
        self.waiting_for_tag: bool = False
        self.creation_data: Dict = {}
    
    @staticmethod
    def format_bytes(bytes_value: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        if bytes_value == 0:
            return "0 B"
        
        value = float(bytes_value)
        for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
            if value < 1024.0:
                return f"{value:.1f} {unit}"
            value /= 1024.0
        return f"{value:.1f} PB"
    
    @staticmethod
    def escape_markdown(text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not text or not isinstance(text, str):
            return str(text) if text is not None else ""
        
        # –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ MarkdownV2
        special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
        
        for char in special_chars:
            text = text.replace(char, f'\\{char}')
        
        return text
    
    def format_user_info(self, user_data: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        username = user_data.get('username', 'Unknown')
        uuid_str = user_data.get('uuid', 'N/A')
        short_uuid = user_data.get('shortUuid', 'N/A')
        
        # –°—Ç–∞—Ç—É—Å—ã
        status = user_data.get('status', '')
        is_active = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if status == 'ACTIVE' else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å –ø–æ onlineAt (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç)
        online_at = user_data.get('onlineAt')
        is_online = "üî¥ –û—Ñ—Ñ–ª–∞–π–Ω"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if online_at:
            try:
                online_time = datetime.fromisoformat(online_at.replace('Z', '+00:00'))
                now = datetime.now(online_time.tzinfo)
                time_diff = now - online_time
                if time_diff.total_seconds() <= 600:  # 10 –º–∏–Ω—É—Ç = 600 —Å–µ–∫—É–Ω–¥
                    is_online = " –û–Ω–ª–∞–π–Ω"
            except:
                pass
        
        # –¢—Ä–∞—Ñ–∏–∫
        used_traffic = self.format_bytes(user_data.get('usedTrafficBytes', 0))
        traffic_limit = user_data.get('trafficLimitBytes', 0)
        traffic_limit_str = self.format_bytes(traffic_limit) if traffic_limit > 0 else "–ë–µ–∑ –ª–∏–º–∏—Ç–∞"
        
        # –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è
        expire_at = user_data.get('expireAt')
        if expire_at:
            try:
                expire_date = datetime.fromisoformat(expire_at.replace('Z', '+00:00'))
                expire_str = expire_date.strftime('%d.%m.%Y %H:%M')
                now = datetime.now(expire_date.tzinfo)
                if expire_date < now:
                    expire_str += " (–∏—Å—Ç–µ–∫)"
                else:
                    days_left = (expire_date - now).days
                    expire_str += f" ({days_left} –¥–Ω.)"
            except:
                expire_str = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞"
        else:
            expire_str = "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        description = user_data.get('description', '')
        tag = user_data.get('tag', '')
        email = user_data.get('email', '')
        
        # –°–∫–≤–∞–¥—ã
        squads = user_data.get('activeInternalSquads', [])
        squads_str = ", ".join([squad.get('name', 'Unknown') for squad in squads]) if squads else "–ù–µ—Ç"
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Markdown
        escaped_username = self.escape_markdown(username)
        
        info = f"**üë§ {escaped_username}**\n\n"
        info += f"üÜî UUID: `{short_uuid}`\n"
        info += f"üìä –°—Ç–∞—Ç—É—Å: {is_active}\n"
        info += f"üåê –û–Ω–ª–∞–π–Ω: {is_online}\n"
        info += f"üìà –¢—Ä–∞—Ñ–∏–∫: {used_traffic} / {traffic_limit_str}\n"
        info += f"‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: {expire_str}\n"
        info += f"üë• –°–∫–≤–∞–¥—ã: {squads_str}\n"
        
        if description:
            escaped_description = self.escape_markdown(description)
            info += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {escaped_description}\n"
        if tag:
            escaped_tag = self.escape_markdown(tag)
            info += f"üè∑Ô∏è –¢–µ–≥: {escaped_tag}\n"
        if email:
            escaped_email = self.escape_markdown(email)
            info += f"üìß Email: {escaped_email}\n"
        
        return info
    
    async def load_users_data(self) -> Tuple[bool, Optional[str]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö"""
        try:
            users_api = UsersAPI()
            async with users_api as users_api:
                response = await users_api.get_all_users()
                
                if isinstance(response, dict) and "response" in response:
                    if "users" in response["response"]:
                        self.current_users = response["response"]["users"]
                        return True, None
                    else:
                        return False, "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API"
                else:
                    return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return False, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}"
    
    async def load_squads_data(self) -> Tuple[bool, Optional[str]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–∫–≤–∞–¥–∞—Ö"""
        try:
            logging.info("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–∫–≤–∞–¥–æ–≤...")
            async with SquadsAPI() as squads_api:
                self.current_squads = await squads_api.get_squads_names_and_uuids()
                logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–∫–≤–∞–¥–æ–≤: {len(self.current_squads)}")
                logging.info(f"–°–∫–≤–∞–¥—ã: {self.current_squads}")
                return True, None
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫–≤–∞–¥–æ–≤: {e}")
            return False, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫–≤–∞–¥–æ–≤: {str(e)}"
    
    def get_users_summary(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        total_users = len(self.current_users)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        active_users = sum(1 for user in self.current_users if user.get('status') == 'ACTIVE')
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç)
        online_users = 0
        for user in self.current_users:
            online_at = user.get('onlineAt')
            if online_at:
                try:
                    online_time = datetime.fromisoformat(online_at.replace('Z', '+00:00'))
                    now = datetime.now(online_time.tzinfo)
                    time_diff = now - online_time
                    if time_diff.total_seconds() <= 600:  # 10 –º–∏–Ω—É—Ç
                        online_users += 1
                except:
                    pass
        
        return (f"**üìä –°–≤–æ–¥–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º**\n\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}\n"
                f"üü¢ –û–Ω–ª–∞–π–Ω: {online_users}")
    
    def get_users_page_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        logging.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {self.current_page}")
        logging.info(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.current_users)}")
        
        total_pages = (len(self.current_users) + self.users_per_page - 1) // self.users_per_page
        start_idx = self.current_page * self.users_per_page
        end_idx = min(start_idx + self.users_per_page, len(self.current_users))
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        buttons = []
        for i in range(start_idx, end_idx):
            user = self.current_users[i]
            username = user.get('username', 'Unknown')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            status = user.get('status', '')
            status_emoji = "‚úÖ" if status == 'ACTIVE' else "‚ùå"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å
            online_emoji = "üî¥"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            online_at = user.get('onlineAt')
            if online_at:
                try:
                    online_time = datetime.fromisoformat(online_at.replace('Z', '+00:00'))
                    now = datetime.now(online_time.tzinfo)
                    time_diff = now - online_time
                    if time_diff.total_seconds() <= 600:  # 10 –º–∏–Ω—É—Ç
                        online_emoji = "üü¢"
                except:
                    pass
            
            button_text = f"{status_emoji}{online_emoji} {username}"
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º UUID –≤–º–µ—Å—Ç–æ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            user_uuid = user.get('uuid', '')
            callback_data = f"user_select_{user_uuid}"
            
            logging.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username} (UUID: {user_uuid})")
            
            buttons.append([InlineKeyboardButton(
                text=button_text,
                callback_data=callback_data
            )])
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if self.current_page > 0:
            nav_buttons.append(InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
                callback_data="users_prev_page"
            ))
        
        if self.current_page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton(
                text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è",
                callback_data="users_next_page"
            ))
        
        if nav_buttons:
            buttons.append(nav_buttons)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        management_buttons = [
            [
                InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="create_user_menu"),
                InlineKeyboardButton(text="‚ö° –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="quick_create_user")
            ],
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="refresh_users"),
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]
        ]
        
        buttons.extend(management_buttons)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if total_pages > 1:
            page_info = f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {self.current_page + 1} –∏–∑ {total_pages}"
            buttons.append([InlineKeyboardButton(
                text=page_info,
                callback_data="page_info"
            )])
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    def get_user_management_keyboard(self, user_data: dict) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        status = user_data.get('status', '')
        is_active = status == 'ACTIVE'
        
        buttons = [
            [
                InlineKeyboardButton(
                    text="üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å" if is_active else "üü¢ –í–∫–ª—é—á–∏—Ç—å",
                    callback_data="toggle_user_status"
                ),
                InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫", callback_data="reset_user_traffic")
            ],
            [
                InlineKeyboardButton(text="üìã –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="get_user_link"),
                InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="delete_user")
            ],
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_user_info"),
                InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É", callback_data="back_to_users")
            ]
        ]
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    def get_squads_selection_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∫–≤–∞–¥–∞"""
        buttons = []
        
        logging.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–∫–≤–∞–¥–æ–≤. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–≤–∞–¥–æ–≤: {len(self.current_squads)}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ë–µ–∑ —Å–∫–≤–∞–¥–∞"
        buttons.append([InlineKeyboardButton(
            text="‚ùå –ë–µ–∑ —Å–∫–≤–∞–¥–∞",
            callback_data="select_squad_none"
        )])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫–≤–∞–¥–∞
        for squad in self.current_squads:
            squad_name = squad.get('name', 'Unknown')
            squad_uuid = squad.get('uuid', '')
            
            logging.info(f"–î–æ–±–∞–≤–ª—è–µ–º —Å–∫–≤–∞–¥: {squad_name} - {squad_uuid}")
            
            buttons.append([InlineKeyboardButton(
                text=f"üë• {squad_name}",
                callback_data=f"select_squad_{squad_uuid}"
            )])
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        buttons.append([InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="cancel_user_creation"
        )])
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    def get_creation_menu_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        buttons = [
            [InlineKeyboardButton(text="‚úèÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ", callback_data="create_user_custom")],
            [InlineKeyboardButton(text="‚ö° –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ (1 –º–µ—Å—è—Ü)", callback_data="create_user_quick")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_users")]
        ]
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    def get_custom_creation_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è"""
        creation_data = self.creation_data
        
        username_status = "‚úÖ" if creation_data.get('username') else "‚ùå"
        expire_status = "‚úÖ" if creation_data.get('expire_days') else "‚ùå"
        traffic_status = "‚úÖ" if creation_data.get('traffic_limit') else "‚ùå"
        
        buttons = [
            [InlineKeyboardButton(text=f"{username_status} –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="set_username")],
            [InlineKeyboardButton(text=f"{expire_status} –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (–¥–Ω–∏)", callback_data="set_expire_days")],
            [InlineKeyboardButton(text=f"{traffic_status} –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ (GB)", callback_data="set_traffic_limit")],
            [InlineKeyboardButton(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", callback_data="set_description")],
            [InlineKeyboardButton(text="üìß Email (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", callback_data="set_email")],
            [InlineKeyboardButton(text="üè∑Ô∏è –¢–µ–≥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", callback_data="set_tag")],
        ]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if creation_data.get('username') and creation_data.get('expire_days') and creation_data.get('traffic_limit') is not None:
            buttons.append([InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="proceed_to_squad_selection")])
        
        buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="create_user_menu")])
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    async def create_user_quick(self) -> Tuple[bool, str, Optional[dict]]:
        """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            username = f"user_{uuid.uuid4().hex[:8]}"
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ 1 –º–µ—Å—è—Ü
            expire_date = datetime.now() + timedelta(days=30)
            expire_at = expire_date.isoformat() + "Z"
            
            async with UsersAPI() as users_api:
                result = await users_api.prepare_and_create_user(
                    username=username,
                    expire_at=expire_at,
                    squad_uuid=self.selected_squad_uuid,
                    traffic_limit_bytes=0,  # –ë–µ–∑ –ª–∏–º–∏—Ç–∞
                    description="–ë—ã—Å—Ç—Ä–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                )
                
                if isinstance(result, dict) and "response" in result:
                    user_data = result["response"]
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
                    self.current_users.append(user_data)
                    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫. UUID: {user_data.get('uuid')}")
                    logging.info(f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ø–∏—Å–∫–µ: {len(self.current_users)}")
                    escaped_username = self.escape_markdown(username)
                    return True, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{escaped_username}** —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", user_data
                else:
                    logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä**—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API: {result}")
                    return False, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", None
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {str(e)}", None
    
    async def create_user_custom(self) -> Tuple[bool, str, Optional[dict]]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            creation_data = self.creation_data
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
            expire_days = creation_data.get('expire_days', 30)
            expire_date = datetime.now() + timedelta(days=expire_days)
            expire_at = expire_date.isoformat() + "Z"
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º GB –≤ –±–∞–π—Ç—ã)
            traffic_limit_gb = creation_data.get('traffic_limit', 0)
            traffic_limit_bytes = int(traffic_limit_gb * 1024 * 1024 * 1024) if traffic_limit_gb > 0 else 0
            
            async with UsersAPI() as users_api:
                result = await users_api.prepare_and_create_user(
                    username=creation_data.get('username'),
                    expire_at=expire_at,
                    squad_uuid=self.selected_squad_uuid,
                    traffic_limit_bytes=traffic_limit_bytes,
                    description=creation_data.get('description'),
                    tag=creation_data.get('tag'),
                    email=creation_data.get('email')
                )
                
                if isinstance(result, dict) and "response" in result:
                    user_data = result["response"]
                    username = creation_data.get('username', 'Unknown')
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
                    self.current_users.append(user_data)
                    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫. UUID: {user_data.get('uuid')}")
                    logging.info(f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ø–∏—Å–∫–µ: {len(self.current_users)}")
                    escaped_username = self.escape_markdown(username)
                    return True, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{escaped_username}** —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", user_data
                else:
                    return False, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", None
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {str(e)}", None
    
    async def toggle_user_status(self, user_data: dict) -> Tuple[bool, str]:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å)"""
        try:
            user_uuid = user_data.get('uuid')
            status = user_data.get('status', '')
            is_active = status == 'ACTIVE'
            username = user_data.get('username', 'Unknown')
            
            async with UsersAPI() as users_api:
                if is_active:
                    result = await users_api.disable_user(user_uuid)
                    action = "–æ—Ç–∫–ª—é—á–µ–Ω"
                else:
                    result = await users_api.enable_user(user_uuid)
                    action = "–≤–∫–ª—é—á–µ–Ω"
                
                if isinstance(result, dict) and "success" in result and result["success"]:
                    escaped_username = self.escape_markdown(username)
                    return True, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{escaped_username}** —É—Å–ø–µ—à–Ω–æ {action}!"
                else:
                    escaped_username = self.escape_markdown(username)
                    return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{escaped_username}**"
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    
    async def reset_user_traffic(self, user_data: dict) -> Tuple[bool, str]:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç—Ä–∞—Ñ–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_uuid = user_data.get('uuid')
            username = user_data.get('username', 'Unknown')
            
            async with UsersAPI() as users_api:
                result = await users_api.reset_user_traffic(user_uuid)
                
                if isinstance(result, dict) and "success" in result and result["success"]:
                    escaped_username = self.escape_markdown(username)
                    return True, f"‚úÖ –¢—Ä–∞—Ñ–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{escaped_username}** —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω!"
                else:
                    escaped_username = self.escape_markdown(username)
                    return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{escaped_username}**"
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Ç—Ä–∞—Ñ–∏–∫–∞: {e}")
            return False, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    
    async def delete_user(self, user_data: dict) -> Tuple[bool, str]:
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_uuid = user_data.get('uuid')
            username = user_data.get('username', 'Unknown')
            
            async with UsersAPI() as users_api:
                result = await users_api.delete_user(user_uuid)
                
                if isinstance(result, dict) and "success" in result and result["success"]:
                    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
                    self.current_users = [u for u in self.current_users if u.get('uuid') != user_uuid]
                    escaped_username = self.escape_markdown(username)
                    return True, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{escaped_username}** —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!"
                else:
                    escaped_username = self.escape_markdown(username)
                    return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{escaped_username}**"
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    
    async def get_user_subscription_link(self, user_data: dict) -> Tuple[bool, str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with UsersAPI() as users_api:
                subscription_link = await users_api.get_sublink({"response": user_data})
                
                if subscription_link:
                    username = user_data.get('username', 'Unknown')
                    escaped_username = self.escape_markdown(username)
                    return True, f"üîó **–°—Å—ã–ª–∫–∞ –¥–ª—è {escaped_username}:**\n\n`{subscription_link}`"
                else:
                    return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É"
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏: {e}")
            return False, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    
    def get_user_by_index(self, index: int) -> Optional[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
        if 0 <= index < len(self.current_users):
            return self.current_users[index]
        return None
    
    async def get_user_by_uuid(self, user_uuid: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ UUID, —Å–Ω–∞—á–∞–ª–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, –∑–∞—Ç–µ–º –∏–∑ API"""
        logging.info(f"–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å UUID: {user_uuid}")
        logging.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ: {len(self.current_users)}")
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ
        for user in self.current_users:
            if user.get('uuid') == user_uuid:
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ: {user.get('username', 'Unknown')}")
                return user
        
        logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑ API")
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑ API
        try:
            async with UsersAPI() as users_api:
                result = await users_api.get_user_by_uuid(user_uuid)
                logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {result}")
                
                if isinstance(result, dict) and "response" in result:
                    user_data = result["response"]
                    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ API: {user_data.get('username', 'Unknown')}")
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
                    self.current_users.append(user_data)
                    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫. –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(self.current_users)}")
                    return user_data
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ UUID {user_uuid}: {e}")
        
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å UUID {user_uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–∏ –≤ API")
        return None
    
    def set_selected_user(self, user_data: dict):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.selected_user = user_data
    
    def get_selected_user(self) -> Optional[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.selected_user
    
    def clear_selected_user(self):
        """–û—á–∏—â–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.selected_user = None
    
    def next_page(self) -> bool:
        """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        total_pages = (len(self.current_users) + self.users_per_page - 1) // self.users_per_page
        if self.current_page < total_pages - 1:
            self.current_page += 1
            return True
        return False
    
    def prev_page(self) -> bool:
        """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        if self.current_page > 0:
            self.current_page -= 1
            return True
        return False
    
    def reset_page(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ –ø–µ—Ä–≤—É—é"""
        self.current_page = 0
    
    def clear_creation_data(self):
        """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.creation_data = {}
        self.selected_squad_uuid = None
        self.waiting_for_username = False
        self.waiting_for_expire_days = False
        self.waiting_for_traffic_limit = False
        self.waiting_for_description = False
        self.waiting_for_email = False
        self.waiting_for_tag = False
    
    def set_last_message(self, message_id: int, chat_id: int):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self.last_message_id = message_id
        self.last_chat_id = chat_id
    
    def get_last_message_info(self) -> Tuple[Optional[int], Optional[int]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        return self.last_message_id, self.last_chat_id
    
    def clear_last_message(self):
        """–û—á–∏—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        self.last_message_id = None
        self.last_chat_id = None
