import asyncio
import logging
from typing import Dict, List, Optional, Tuple
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from api.nodes import NodesAPI


class NodeManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–¥–∞–º–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∏—Ö"""
    
    def __init__(self):
        self.current_nodes: List[str] = []
        self.current_nodes_data: Dict[str, dict] = {}
        self.current_selected_node: Optional[str] = None
        self.last_message_id: Optional[int] = None
        self.last_chat_id: Optional[int] = None
    
    @staticmethod
    def format_bytes(bytes_value: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        if bytes_value == 0:
            return "0 B"
        
        value = float(bytes_value)
        for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
            if value < 1024.0:
                return f"{value:.1f} {unit}"
            value /= 1024.0
        return f"{value:.1f} PB"
    
    def format_node_info(self, node_data: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–¥–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        name = node_data.get('name', 'Unknown')
        address = node_data.get('address', 'N/A')
        port = node_data.get('port', 'N/A')
        
        # –°—Ç–∞—Ç—É—Å—ã
        is_connected = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞" if node_data.get('isConnected') else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞"
        is_online = "üü¢ –û–Ω–ª–∞–π–Ω" if node_data.get('isNodeOnline') else "üî¥ –û—Ñ—Ñ–ª–∞–π–Ω"
        is_xray_running = "‚úÖ –ó–∞–ø—É—â–µ–Ω" if node_data.get('isXrayRunning') else "‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        is_disabled = "üö´ –û—Ç–∫–ª—é—á–µ–Ω–∞" if node_data.get('isDisabled') else "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        users_online = node_data.get('usersOnline', 0)
        xray_version = node_data.get('xrayVersion', 'N/A')
        node_version = node_data.get('nodeVersion', 'N/A')
        country_code = node_data.get('countryCode', 'N/A')
        
        # –¢—Ä–∞—Ñ–∏–∫
        traffic_used = node_data.get('trafficUsedBytes', 0)
        traffic_limit = node_data.get('trafficLimitBytes', 0)
        
        traffic_used_str = self.format_bytes(traffic_used)
        traffic_limit_str = self.format_bytes(traffic_limit) if traffic_limit > 0 else "–ë–µ–∑–ª–∏–º–∏—Ç"
        
        info_text = f"""
üîß **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–¥–µ: {name}**

üåê **–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:**
‚Ä¢ –ê–¥—Ä–µ—Å: `{address}:{port}`
‚Ä¢ –°—Ç—Ä–∞–Ω–∞: {country_code}
‚Ä¢ –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {is_connected}
‚Ä¢ –°—Ç–∞—Ç—É—Å –Ω–æ–¥—ã: {is_online}
‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {is_disabled}

‚öôÔ∏è **–°–µ—Ä–≤–∏—Å—ã:**
‚Ä¢ Xray: {is_xray_running}
‚Ä¢ –í–µ—Ä—Å–∏—è Xray: {xray_version}
‚Ä¢ –í–µ—Ä—Å–∏—è –Ω–æ–¥—ã: {node_version}

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –û–Ω–ª–∞–π–Ω: {users_online}

üìä **–¢—Ä–∞—Ñ–∏–∫:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {traffic_used_str}
‚Ä¢ –õ–∏–º–∏—Ç: {traffic_limit_str}
"""
        return info_text
    
    def get_node_management_keyboard(self, node_data: dict) -> types.ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–¥–æ–π"""
        kb = []
        
        # –ö–Ω–æ–ø–∫–∏ –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        if node_data.get('isDisabled'):
            kb.append([types.KeyboardButton(text="üü¢ –í–∫–ª—é—á–∏—Ç—å –Ω–æ–¥—É")])
        else:
            kb.append([types.KeyboardButton(text="üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–æ–¥—É")])
        
        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        kb.append([types.KeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–¥—É")])
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        kb.append([types.KeyboardButton(text="üîç –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")])
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        kb.append([types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –Ω–æ–¥")])
        
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=kb,
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
        )
        return keyboard
    
    def get_node_management_inline_keyboard(self, node_data: dict) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–¥–æ–π (–¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π)"""
        kb = []
        
        # –ö–Ω–æ–ø–∫–∏ –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        if node_data.get('isDisabled'):
            kb.append([InlineKeyboardButton(text="üü¢ –í–∫–ª—é—á–∏—Ç—å –Ω–æ–¥—É", callback_data="enable_node")])
        else:
            kb.append([InlineKeyboardButton(text="üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–æ–¥—É", callback_data="disable_node")])
        
        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        kb.append([InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–¥—É", callback_data="restart_node")])
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        kb.append([InlineKeyboardButton(text="üîç –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", callback_data="refresh_info")])
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        kb.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –Ω–æ–¥", callback_data="back_to_nodes")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
        return keyboard
    
    def get_nodes_list_keyboard(self) -> types.ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–æ–¥"""
        kb = []
        nodes = self.current_nodes
        
        # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –Ω–æ–¥—ã –ø–æ 2 –≤ —Ä—è–¥
        for i in range(0, len(nodes), 2):
            row = []
            row.append(types.KeyboardButton(text=nodes[i]))
            if i + 1 < len(nodes):
                row.append(types.KeyboardButton(text=nodes[i + 1]))
            kb.append(row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –Ω–æ–¥
        kb.append([types.KeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –Ω–æ–¥—ã")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        kb.append([types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])
        
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=kb,
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–¥—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
        )
        return keyboard
    
    def get_restart_all_confirmation_keyboard(self) -> types.InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –Ω–æ–¥"""
        kb = [
            [
                types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_restart_all"),
                types.InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_restart_all")
            ]
        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
        return keyboard
    
    async def load_nodes_data(self) -> Tuple[bool, str]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–¥–∞—Ö –∏–∑ API
        
        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)
        """
        try:
            async with NodesAPI() as nodes_api:
                nodes_data = await nodes_api.get_all_nodes()
            
            if not nodes_data:
                return False, "–ù–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–¥ –∏–∑ –∫–ª—é—á–∞ 'response'
            nodes_list = nodes_data.get('response', [])
            
            if not nodes_list:
                return False, "–ù–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º–µ–Ω–∞ –Ω–æ–¥ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
            self.current_nodes = [
                node.get("name", f"Node-{node.get('uuid', 'Unknown')}")
                for node in nodes_list
            ]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–¥ —Å –∫–ª—é—á–æ–º –ø–æ –∏–º–µ–Ω–∏
            self.current_nodes_data = {
                node.get("name", f"Node-{node.get('uuid', 'Unknown')}"): node
                for node in nodes_list
            }
            
            return True, ""
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–æ–¥: {e}")
            return False, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–æ–¥: {str(e)}"
    
    def get_node_data(self, node_name: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–æ–¥–µ"""
        return self.current_nodes_data.get(node_name)
    
    def set_selected_node(self, node_name: str) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–æ–¥—É"""
        self.current_selected_node = node_name
    
    def clear_selected_node(self) -> None:
        """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–æ–¥—É"""
        self.current_selected_node = None
    
    def get_selected_node(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è —Ç–µ–∫—É—â–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–æ–¥—ã"""
        return self.current_selected_node
    
    def set_last_message(self, message_id: int, chat_id: int) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        self.last_message_id = message_id
        self.last_chat_id = chat_id
    
    def get_last_message_info(self) -> Tuple[Optional[int], Optional[int]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        return self.last_message_id, self.last_chat_id
    
    def clear_last_message(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        self.last_message_id = None
        self.last_chat_id = None
    
    def is_node_in_list(self, node_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –Ω–æ–¥–∞ –≤ —Å–ø–∏—Å–∫–µ"""
        return node_name in self.current_nodes
    
    async def enable_node(self, node_name: str) -> Tuple[bool, str]:
        """
        –í–∫–ª—é—á–∞–µ—Ç –Ω–æ–¥—É
        
        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        node_data = self.get_node_data(node_name)
        if not node_data:
            return False, "–î–∞–Ω–Ω—ã–µ –æ –Ω–æ–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        
        try:
            node_uuid = node_data.get('uuid')
            async with NodesAPI() as nodes_api:
                await nodes_api.enable_node(node_uuid)
            
            return True, f"‚úÖ –ù–æ–¥–∞ {node_name} –±—ã–ª–∞ –≤–∫–ª—é—á–µ–Ω–∞!"
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –Ω–æ–¥—ã: {e}")
            return False, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –Ω–æ–¥—ã: {str(e)}"
    
    async def disable_node(self, node_name: str) -> Tuple[bool, str]:
        """
        –û—Ç–∫–ª—é—á–∞–µ—Ç –Ω–æ–¥—É
        
        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        node_data = self.get_node_data(node_name)
        if not node_data:
            return False, "–î–∞–Ω–Ω—ã–µ –æ –Ω–æ–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        
        try:
            node_uuid = node_data.get('uuid')
            async with NodesAPI() as nodes_api:
                await nodes_api.disable_node(node_uuid)
            
            return True, f"üî¥ –ù–æ–¥–∞ {node_name} –±—ã–ª–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞!"
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –Ω–æ–¥—ã: {e}")
            return False, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –Ω–æ–¥—ã: {str(e)}"
    
    async def restart_node(self, node_name: str) -> Tuple[bool, str]:
        """
        –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–æ–¥—É
        
        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        node_data = self.get_node_data(node_name)
        if not node_data:
            return False, "–î–∞–Ω–Ω—ã–µ –æ –Ω–æ–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        
        try:
            node_uuid = node_data.get('uuid')
            async with NodesAPI() as nodes_api:
                await nodes_api.restart_node(node_uuid)
            
            return True, f"üîÑ –ù–æ–¥–∞ {node_name} –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è..."
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–¥—ã: {e}")
            return False, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–¥—ã: {str(e)}"
    
    async def restart_all_nodes(self) -> Tuple[bool, str]:
        """
        –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –Ω–æ–¥—ã
        
        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        if not self.current_nodes:
            return False, "–°–ø–∏—Å–æ–∫ –Ω–æ–¥ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω."
        
        try:
            async with NodesAPI() as nodes_api:
                await nodes_api.restart_all_nodes()
            
            nodes_count = len(self.current_nodes)
            return True, f"üîÑ –ó–∞–ø—É—â–µ–Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –Ω–æ–¥ ({nodes_count} –Ω–æ–¥(—ã))..."
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö –Ω–æ–¥: {e}")
            return False, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö –Ω–æ–¥: {str(e)}"
    
    def get_nodes_summary(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ –Ω–æ–¥–∞–º"""
        if not self.current_nodes:
            return "–ù–æ–¥—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã."
        
        return "–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–¥—ã:\n" + "\n".join([f"‚Ä¢ {node}" for node in self.current_nodes])
