import asyncio
import sys
import os
from typing import Optional, Dict, Any, List
from aiogram import types

# Add project root to path
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

from handlers.api.system_stats import SystemStatsAPI
from handlers.api.bandwidth import BandwidthAPI


class SystemStatsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Å–∏—Å—Ç–µ–º—ã"""

    def __init__(self):
        self.system_stats_api = SystemStatsAPI()
        self.bandwidth_api = BandwidthAPI()
        self.current_category = None
        self.last_message_id = None
        self.last_chat_id = None
        self.system_data = {}
        self.bandwidth_data = {}
        self.health_data = {}
        self.nodes_metrics_data = {}
        self.real_time_data = {}

    def set_last_message(self, message_id: int, chat_id: int):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        self.last_message_id = message_id
        self.last_chat_id = chat_id

    def get_last_message(self) -> tuple:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —á–∞—Ç–∞"""
        return self.last_message_id, self.last_chat_id

    def set_current_category(self, category: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.current_category = category

    def get_current_category(self) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return self.current_category

    async def load_all_stats_data(self) -> tuple[bool, Optional[str]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            async with self.system_stats_api as api:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                system_response = await api.get_system_stats()
                self.system_data = system_response

                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª–æ—Å—ã –ø—Ä–æ–ø—É—Å–∫–∞–Ω–∏—è
                bandwidth_response = await api.get_bandwidth_stats()
                self.bandwidth_data = bandwidth_response

                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
                health_response = await api.get_system_health()
                self.health_data = health_response

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –Ω–æ–¥
                nodes_metrics_response = await api.get_nodes_metrics()
                self.nodes_metrics_data = nodes_metrics_response

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            async with self.bandwidth_api as bandwidth:
                real_time_response = await bandwidth.get_nodes_rt_usage()
                self.real_time_data = real_time_response

            return True, None

        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"

    def get_main_stats_keyboard(self) -> types.InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã",
                    callback_data="stats_system"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üì° –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞",
                    callback_data="stats_bandwidth"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üåê –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–¥",
                    callback_data="stats_nodes"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="‚ö° –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏",
                    callback_data="stats_realtime"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üîß –ü—Ä–æ—Ü–µ—Å—Å—ã",
                    callback_data="stats_health"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ",
                    callback_data="stats_refresh_all"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="back_to_main"
                )
            ]
        ])
        return keyboard

    def get_category_keyboard(self, category: str) -> types.InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        keyboard_buttons = []

        if category == "stats_system":
            keyboard_buttons = [
                [types.InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="system_users")],
                [types.InlineKeyboardButton(text="üíæ –ü–∞–º—è—Ç—å", callback_data="system_memory")]
            ]
        elif category == "stats_bandwidth":
            # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —É–∂–µ –≤—ã–≤–æ–¥—è—Ç—Å—è –≤ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
            keyboard_buttons = []
        elif category == "stats_nodes":
            keyboard_buttons = [
                [types.InlineKeyboardButton(text="üìä –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="nodes_general")],
                [types.InlineKeyboardButton(text="üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="nodes_detailed")]
            ]

        # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        keyboard_buttons.extend([
            [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_{category}")],
            [types.InlineKeyboardButton(text="üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="stats_back_to_categories")]
        ])

        return types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    def format_system_stats(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—â—É—é —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if not self.system_data or 'response' not in self.system_data:
            return "‚ùå –î–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

        data = self.system_data['response']
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏  
        memory_info = data.get('memory', {})
        total_mb = memory_info.get('total', 0) / 1024 / 1024
        used_mb = memory_info.get('used', 0) / 1024 / 1024
        free_mb = memory_info.get('free', 0) / 1024 / 1024
        
        memory_text = f"üíæ **–ü–∞–º—è—Ç—å:**\n"
        memory_text += f"‚îú –í—Å–µ–≥–æ: {total_mb:.1f} MB\n"
        memory_text += f"‚îú –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {used_mb:.1f} MB\n"
        memory_text += f"‚îî –°–≤–æ–±–æ–¥–Ω–æ: {free_mb:.1f} MB\n\n"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        users_info = data.get('users', {})
        status_counts = users_info.get('statusCounts', {})
        
        users_text = f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
        users_text += f"‚îú –í—Å–µ–≥–æ: {users_info.get('totalUsers', 0)}\n"
        users_text += f"‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö: {status_counts.get('ACTIVE', 0)}\n"
        users_text += f"‚îú –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö: {status_counts.get('DISABLED', 0)}\n"
        users_text += f"‚îú –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö: {status_counts.get('LIMITED', 0)}\n"
        users_text += f"‚îî –ò—Å—Ç–µ–∫—à–∏—Ö: {status_counts.get('EXPIRED', 0)}\n\n"

        # –û–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        online_info = data.get('onlineStats', {})
        online_text = f"üìà **–û–Ω–ª–∞–π–Ω:**\n"
        online_text += f"‚îú –°–µ–π—á–∞—Å: {online_info.get('onlineNow', 0)}\n"
        online_text += f"‚îú –ó–∞ –¥–µ–Ω—å: {online_info.get('lastDay', 0)}\n"
        online_text += f"‚îú –ó–∞ –Ω–µ–¥–µ–ª—é: {online_info.get('lastWeek', 0)}\n"
        online_text += f"‚îî –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–ª–∏: {online_info.get('neverOnline', 0)}\n\n"

        # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        uptime_seconds = data.get('uptime', 0)
        uptime_days = uptime_seconds // 86400
        uptime_hours = (uptime_seconds % 86400) // 3600
        uptime_text = f"‚è± **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {int(uptime_days)} –¥–Ω–µ–π, {int(uptime_hours)} —á–∞—Å–æ–≤\n"

        return f"üìä **–°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n{memory_text}{users_text}{online_text}{uptime_text}"

    def format_bandwidth_stats(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª–æ—Å—ã –ø—Ä–æ–ø—É—Å–∫–∞–Ω–∏—è"""
        if not self.bandwidth_data or 'response' not in self.bandwidth_data:
            return "‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª–æ—Å—ã –ø—Ä–æ–ø—É—Å–∫–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

        data = self.bandwidth_data['response']

        text = "üì° **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞**\n\n"

        # –ó–∞ 2 –¥–Ω—è
        two_days = data.get('bandwidthLastTwoDays', {})
        text += f"üìÖ **–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è:**\n"
        text += f"‚îú –¢–µ–∫—É—â–∏–π: {two_days.get('current', 'N/A')}\n"
        text += f"‚îú –ü—Ä–µ–¥—ã–¥—É—â–∏–π: {two_days.get('previous', 'N/A')}\n"
        text += f"‚îî –†–∞–∑–Ω–∏—Ü–∞: {two_days.get('difference', 'N/A')}\n\n"

        # –ó–∞ –Ω–µ–¥–µ–ª—é
        week = data.get('bandwidthLastSevenDays', {})
        text += f"üìÖ **–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:**\n"
        text += f"‚îú –¢–µ–∫—É—â–∏–π: {week.get('current', 'N/A')}\n"
        text += f"‚îú –ü—Ä–µ–¥—ã–¥—É—â–∏–π: {week.get('previous', 'N/A')}\n"
        text += f"‚îî –†–∞–∑–Ω–∏—Ü–∞: {week.get('difference', 'N/A')}\n\n"

        # –ó–∞ –º–µ—Å—è—Ü
        month = data.get('bandwidthLast30Days', {})
        text += f"üìÖ **–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:**\n"
        text += f"‚îú –¢–µ–∫—É—â–∏–π: {month.get('current', 'N/A')}\n"
        text += f"‚îú –ü—Ä–µ–¥—ã–¥—É—â–∏–π: {month.get('previous', 'N/A')}\n"
        text += f"‚îî –†–∞–∑–Ω–∏—Ü–∞: {month.get('difference', 'N/A')}\n\n"

        # –ó–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –º–µ—Å—è—Ü
        cal_month = data.get('bandwidthCalendarMonth', {})
        text += f"üìÖ **–ó–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –º–µ—Å—è—Ü:**\n"
        text += f"‚îú –¢–µ–∫—É—â–∏–π: {cal_month.get('current', 'N/A')}\n"
        text += f"‚îú –ü—Ä–µ–¥—ã–¥—É—â–∏–π: {cal_month.get('previous', 'N/A')}\n"
        text += f"‚îî –†–∞–∑–Ω–∏—Ü–∞: {cal_month.get('difference', 'N/A')}\n\n"

        # –ó–∞ –≥–æ–¥
        year = data.get('bandwidthCurrentYear', {})
        text += f"üìÖ **–ó–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥:**\n"
        text += f"‚îú –¢–µ–∫—É—â–∏–π: {year.get('current', 'N/A')}\n"
        text += f"‚îú –ü—Ä–µ–¥—ã–¥—É—â–∏–π: {year.get('previous', 'N/A')}\n"
        text += f"‚îî –†–∞–∑–Ω–∏—Ü–∞: {year.get('difference', 'N/A')}\n"

        return text

    def format_nodes_stats(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–æ–¥"""
        if not self.nodes_metrics_data or 'response' not in self.nodes_metrics_data:
            return "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

        data = self.nodes_metrics_data['response']
        nodes = data.get('nodes', [])

        if not nodes:
            return "üìç –ù–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

        text = "üåê **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–¥**\n\n"

        for i, node in enumerate(nodes[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –Ω–æ–¥
            text += f"{node.get('countryEmoji', 'üåç')} **{node.get('nodeName', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–æ–¥–∞')}**\n"
            text += f"‚îú UUID: `{node.get('nodeUuid', 'N/A')[:8]}...`\n"
            text += f"‚îú –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {node.get('providerName', 'N/A')}\n"
            text += f"‚îî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: {node.get('usersOnline', 0)}\n"

            # Inbound —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            inbounds = node.get('inboundsStats', [])
            if inbounds:
                text += f"  üì• **–í—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫:**\n"
                for inbound in inbounds[:2]:  # –ü–µ—Ä–≤—ã–µ 2
                    text += f"  ‚îú {inbound.get('tag', 'N/A')}: ‚Üì{inbound.get('download', '0')} ‚Üë{inbound.get('upload', '0')}\n"

            text += "\n"

        if len(nodes) > 5:
            text += f"... –∏ –µ—â–µ {len(nodes) - 5} –Ω–æ–¥\n"

        return text

    def format_realtime_stats(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        if not self.real_time_data or 'response' not in self.real_time_data:
            return "‚ùå –î–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

        nodes = self.real_time_data['response']

        if not nodes:
            return "‚ö° –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"

        text = "‚ö° **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏**\n\n"

        for node in nodes:
            flag = "üá∏üá™" if node.get('countryCode') == "SE" else \
                   "üá∑üá∫" if node.get('countryCode') == "RU" else \
                   "üá©üá™" if node.get('countryCode') == "DE" else "üåç"
            
            text += f"{flag} **{node.get('nodeName', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É–∑–µ–ª')}**\n"
            text += f"‚îú –°–∫–∞—á–∞–Ω–æ: {self._format_bytes(node.get('downloadBytes', 0))}\n"
            text += f"‚îú –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {self._format_bytes(node.get('uploadBytes', 0))}\n"
            text += f"‚îú –í—Å–µ–≥–æ: {self._format_bytes(node.get('totalBytes', 0))}\n"
            text += f"‚îú –°–∫–æ—Ä–æ—Å—Ç—å ‚Üì: {node.get('downloadSpeedBps', 0)} Bps\n"
            text += f"‚îî –°–∫–æ—Ä–æ—Å—Ç—å ‚Üë: {node.get('uploadSpeedBps', 0)} Bps\n\n"

        return text

    def format_health_stats(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        if not self.health_data or 'response' not in self.health_data:
            return "‚ùå –î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

        data = self.health_data['response']
        pm2_stats = data.get('pm2Stats', [])

        if not pm2_stats:
            return "üîß –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ PM2 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"

        text = "üîß **–ü—Ä–æ—Ü–µ—Å—Å—ã —Å–∏—Å—Ç–µ–º—ã (PM2)**\n\n"

        for process in pm2_stats:
            text += f"‚öôÔ∏è **{process.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å')}**\n"
            text += f"‚îú –ü–∞–º—è—Ç—å: {process.get('memory', 'N/A')}\n"
            text += f"‚îî CPU: {process.get('cpu', 'N/A')}%\n\n"

        return text

    def _format_bytes(self, bytes_value: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–∞–π—Ç—ã –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        if bytes_value >= 1024**3:
            return f"{bytes_value / (1024**3):.2f} GB"
        elif bytes_value >= 1024**2:
            return f"{bytes_value / (1024**2):.2f} MB"
        elif bytes_value >= 1024:
            return f"{bytes_value / 1024:.2f} KB"
        else:
            return f"{bytes_value} B"

    def get_stats_summary(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –≤—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        summary = "üìä **–°–≤–æ–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏**\n\n"

        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if self.system_data and 'response' in self.system_data:
            data = self.system_data['response']
            users_info = data.get('users', {})
            online_info = data.get('onlineStats', {})
            nodes_info = data.get('nodes', {})
            
            summary += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_info.get('totalUsers', 0)}\n"
            summary += f"üü¢ –û–Ω–ª–∞–π–Ω —Å–µ–π—á–∞—Å: {online_info.get('onlineNow', 0)}\n"
            
            # –ü–∞–º—è—Ç—å
            memory_info = data.get('memory', {})
            used_gb = memory_info.get('used', 0) / (1024**3)
            total_gb = memory_info.get('total', 0) / (1024**3)
            summary += f"üíæ –ü–∞–º—è—Ç—å: {used_gb:.1f}/{total_gb:.1f} GB\n"

        # –¢—Ä–∞—Ñ–∏–∫ –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª–æ—Å—ã –ø—Ä–æ–ø—É—Å–∫–∞–Ω–∏—è
        if self.bandwidth_data and 'response' in self.bandwidth_data:
            data = self.bandwidth_data['response']
            month_data = data.get('bandwidthLast30Days', {})
            summary += f"üì° –¢—Ä–∞—Ñ–∏–∫ –∑–∞ –º–µ—Å—è—Ü: {month_data.get('current', 'N/A')}\n"

        summary += "\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
        return summary
