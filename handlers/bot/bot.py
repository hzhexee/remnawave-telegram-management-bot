import asyncio
import json
import logging
import os
from typing import Callable, Dict, Any, Awaitable
from aiogram import Bot, Dispatcher, types, BaseMiddleware
from aiogram.filters.command import Command
from aiogram.types import Update, TelegramObject
from bot_handlers import BotHandlers

token = os.getenv("TELEGRAM_BOT_TOKEN")
if token is None:
    raise ValueError("TELEGRAM_BOT_TOKEN environment variable is not set")

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
admin_user_ids_str = os.getenv("ADMIN_USER_ID")
if admin_user_ids_str is None:
    raise ValueError("ADMIN_USER_ID environment variable is not set")

# –ü–∞—Ä—Å–∏–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥–≤–∞ —Ñ–æ—Ä–º–∞—Ç–∞: JSON —Å–ø–∏—Å–æ–∫ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
try:
    # –ü—ã—Ç–∞–µ–º—Å—è —Å–Ω–∞—á–∞–ª–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
    if admin_user_ids_str.strip().startswith('['):
        admin_user_ids = json.loads(admin_user_ids_str)
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        admin_user_ids = [int(uid) if isinstance(uid, str) else uid for uid in admin_user_ids]
    else:
        # –ò–Ω–∞—á–µ –ø–∞—Ä—Å–∏–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
        admin_user_ids = [int(uid.strip()) for uid in admin_user_ids_str.split(',')]
except (ValueError, json.JSONDecodeError) as e:
    raise ValueError(f"ADMIN_USER_ID must contain valid integers in JSON array format or comma-separated: {e}")

def check_admin_access(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in admin_user_ids

class AdminMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        user_id = None
        username = None
        
        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
        if isinstance(event, types.Message) and event.from_user:
            user_id = event.from_user.id
            username = event.from_user.username or event.from_user.first_name
        elif isinstance(event, types.CallbackQuery) and event.from_user:
            user_id = event.from_user.id
            username = event.from_user.username or event.from_user.first_name
        
        if user_id is None or not check_admin_access(user_id):
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            logging.warning(f"Unauthorized access attempt from user_id: {user_id}, username: {username}")
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if isinstance(event, types.Message):
                await event.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            # –ï—Å–ª–∏ —ç—Ç–æ callback, –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–µ–≥–æ
            elif isinstance(event, types.CallbackQuery):
                await event.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.", show_alert=True)
            return
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –¥–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∞
        logging.info(f"Admin access granted for user_id: {user_id}, username: {username}")
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
        return await handler(event, data)

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞—Ö
logging.info(f"Bot configured with {len(admin_user_ids)} admin(s): {admin_user_ids}")

# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=token)
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
admin_middleware = AdminMiddleware()
dp.message.middleware(admin_middleware)
dp.callback_query.middleware(admin_middleware)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
handlers = BotHandlers(bot)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await handlers.handle_start(message)

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await handlers.handle_help(message)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
@dp.message(lambda message: message.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
async def process_manage_users(message: types.Message):
    await handlers.handle_manage_users(message)

@dp.message(lambda message: message.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–¥–∞–º–∏")
async def process_manage_nodes(message: types.Message):
    await handlers.handle_manage_nodes(message)

@dp.message(lambda message: message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
async def process_system_stats(message: types.Message):
    await handlers.handle_system_stats(message)

@dp.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
async def process_back(message: types.Message):
    await handlers.handle_back(message)

@dp.message(lambda message: message.text == "üü¢ –í–∫–ª—é—á–∏—Ç—å –Ω–æ–¥—É")
async def process_enable_node(message: types.Message):
    await handlers.handle_enable_node(message)

@dp.message(lambda message: message.text == "üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–æ–¥—É")
async def process_disable_node(message: types.Message):
    await handlers.handle_disable_node(message)

@dp.message(lambda message: message.text == "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–¥—É")
async def process_restart_node(message: types.Message):
    await handlers.handle_restart_node(message)

@dp.message(lambda message: message.text == "üîç –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
async def process_refresh_node_info(message: types.Message):
    await handlers.handle_refresh_node_info(message)

@dp.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –Ω–æ–¥")
async def process_back_to_nodes(message: types.Message):
    await handlers.handle_back_to_nodes(message)

@dp.message(lambda message: message.text == "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –Ω–æ–¥—ã")
async def process_restart_all_nodes(message: types.Message):
    await handlers.handle_restart_all_nodes(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–æ–¥—ã (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
@dp.message(lambda message: message.text and handlers.is_node_name(message.text))
async def process_node_selection(message: types.Message):
    await handlers.handle_node_selection(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(lambda message: message.text and handlers.is_waiting_for_user_input())
async def process_user_text_input(message: types.Message):
    await handlers.handle_user_text_input(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
@dp.callback_query(lambda c: c.data == "enable_node")
async def process_inline_enable_node(callback_query: types.CallbackQuery):
    await handlers.handle_inline_enable_node(callback_query)

@dp.callback_query(lambda c: c.data == "disable_node")
async def process_inline_disable_node(callback_query: types.CallbackQuery):
    await handlers.handle_inline_disable_node(callback_query)

@dp.callback_query(lambda c: c.data == "restart_node")
async def process_inline_restart_node(callback_query: types.CallbackQuery):
    await handlers.handle_inline_restart_node(callback_query)

@dp.callback_query(lambda c: c.data == "refresh_info")
async def process_inline_refresh_info(callback_query: types.CallbackQuery):
    await handlers.handle_inline_refresh_info(callback_query)

@dp.callback_query(lambda c: c.data == "back_to_nodes")
async def process_inline_back_to_nodes(callback_query: types.CallbackQuery):
    await handlers.handle_inline_back_to_nodes(callback_query)

@dp.callback_query(lambda c: c.data == "confirm_restart_all")
async def process_confirm_restart_all(callback_query: types.CallbackQuery):
    await handlers.handle_confirm_restart_all(callback_query)

@dp.callback_query(lambda c: c.data == "cancel_restart_all")
async def process_cancel_restart_all(callback_query: types.CallbackQuery):
    await handlers.handle_cancel_restart_all(callback_query)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.callback_query(lambda c: c.data == "users_next_page")
async def process_users_next_page(callback_query: types.CallbackQuery):
    await handlers.handle_users_pagination(callback_query, "next")

@dp.callback_query(lambda c: c.data == "users_prev_page")
async def process_users_prev_page(callback_query: types.CallbackQuery):
    await handlers.handle_users_pagination(callback_query, "prev")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(lambda c: c.data and c.data.startswith("user_select_"))
async def process_user_select(callback_query: types.CallbackQuery):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {callback_query.data}")
    
    if not callback_query.data:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", show_alert=True)
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º UUID –∏–∑ callback_data
    user_uuid = callback_query.data.replace("user_select_", "")
    logging.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_uuid}")
    
    await handlers.handle_user_select_by_uuid(callback_query, user_uuid)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
@dp.callback_query(lambda c: c.data == "refresh_users")
async def process_refresh_users(callback_query: types.CallbackQuery):
    await handlers.handle_refresh_users(callback_query)

@dp.callback_query(lambda c: c.data == "create_user_menu")
async def process_create_user_menu(callback_query: types.CallbackQuery):
    await handlers.handle_create_user_menu(callback_query)

@dp.callback_query(lambda c: c.data == "quick_create_user")
async def process_quick_create_user(callback_query: types.CallbackQuery):
    await handlers.handle_quick_create_user(callback_query)

@dp.callback_query(lambda c: c.data == "create_user_quick")
async def process_create_user_quick_alt(callback_query: types.CallbackQuery):
    await handlers.handle_quick_create_user(callback_query)

@dp.callback_query(lambda c: c.data == "create_user_custom")
async def process_create_user_custom(callback_query: types.CallbackQuery):
    await handlers.handle_create_user_custom(callback_query)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–∫–≤–∞–¥–∞
@dp.callback_query(lambda c: c.data and c.data.startswith("select_squad_"))
async def process_squad_selection(callback_query: types.CallbackQuery):
    if not callback_query.data:
        return
    squad_uuid = callback_query.data.split("_", 2)[-1]  # –ø–æ–ª—É—á–∞–µ–º UUID –ø–æ—Å–ª–µ "select_squad_"
    await handlers.handle_squad_selection(callback_query, squad_uuid)

@dp.callback_query(lambda c: c.data == "proceed_to_squad_selection")
async def process_proceed_to_squad_selection(callback_query: types.CallbackQuery):
    await handlers.handle_proceed_to_squad_selection(callback_query)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
@dp.callback_query(lambda c: c.data == "set_username")
async def process_set_username(callback_query: types.CallbackQuery):
    await callback_query.answer()
    handlers.user_manager.waiting_for_username = True
    if callback_query.message:
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")

@dp.callback_query(lambda c: c.data == "set_expire_days")
async def process_set_expire_days(callback_query: types.CallbackQuery):
    await callback_query.answer()
    handlers.user_manager.waiting_for_expire_days = True
    if callback_query.message:
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")

@dp.callback_query(lambda c: c.data == "set_traffic_limit")
async def process_set_traffic_limit(callback_query: types.CallbackQuery):
    await callback_query.answer()
    handlers.user_manager.waiting_for_traffic_limit = True
    if callback_query.message:
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ GB (–∏–ª–∏ 0 –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞):")

@dp.callback_query(lambda c: c.data == "set_description")
async def process_set_description(callback_query: types.CallbackQuery):
    await callback_query.answer()
    handlers.user_manager.waiting_for_description = True
    if callback_query.message:
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")

@dp.callback_query(lambda c: c.data == "set_email")
async def process_set_email(callback_query: types.CallbackQuery):
    await callback_query.answer()
    handlers.user_manager.waiting_for_email = True
    if callback_query.message:
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")

@dp.callback_query(lambda c: c.data == "set_tag")
async def process_set_tag(callback_query: types.CallbackQuery):
    await callback_query.answer()
    handlers.user_manager.waiting_for_tag = True
    if callback_query.message:
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@dp.callback_query(lambda c: c.data == "toggle_user_status")
async def process_toggle_user_status(callback_query: types.CallbackQuery):
    user_data = handlers.user_manager.get_selected_user()
    if user_data:
        await handlers.handle_toggle_user_status(callback_query, user_data)
    else:
        await callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

@dp.callback_query(lambda c: c.data == "reset_user_traffic")
async def process_reset_user_traffic(callback_query: types.CallbackQuery):
    user_data = handlers.user_manager.get_selected_user()
    if user_data:
        await handlers.handle_reset_user_traffic(callback_query, user_data)
    else:
        await callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

@dp.callback_query(lambda c: c.data == "get_user_link")
async def process_get_user_link(callback_query: types.CallbackQuery):
    user_data = handlers.user_manager.get_selected_user()
    if user_data:
        await handlers.handle_get_user_link(callback_query, user_data)
    else:
        await callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

@dp.callback_query(lambda c: c.data == "delete_user")
async def process_delete_user(callback_query: types.CallbackQuery):
    user_data = handlers.user_manager.get_selected_user()
    if user_data:
        await handlers.handle_delete_user(callback_query, user_data)
    else:
        await callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

@dp.callback_query(lambda c: c.data == "refresh_user_info")
async def process_refresh_user_info(callback_query: types.CallbackQuery):
    user_data = handlers.user_manager.get_selected_user()
    if user_data:
        await handlers.handle_refresh_user_info(callback_query, user_data)
    else:
        await callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
@dp.callback_query(lambda c: c.data == "back_to_users")
async def process_back_to_users(callback_query: types.CallbackQuery):
    await handlers.handle_back_to_users(callback_query)

@dp.callback_query(lambda c: c.data == "back_to_main")
async def process_back_to_main(callback_query: types.CallbackQuery):
    await handlers.handle_back_to_main(callback_query)

@dp.callback_query(lambda c: c.data == "cancel_user_creation")
async def process_cancel_user_creation(callback_query: types.CallbackQuery):
    await handlers.handle_cancel_user_creation(callback_query)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
@dp.callback_query(lambda c: c.data and c.data.startswith("stats_"))
async def process_stats_category(callback_query: types.CallbackQuery):
    if not callback_query.data:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
        
    if callback_query.data == "stats_refresh_all":
        await handlers.handle_refresh_stats(callback_query)
    elif callback_query.data == "stats_back_to_categories":
        await handlers.handle_stats_back_to_categories(callback_query)
    else:
        await handlers.handle_stats_category(callback_query, callback_query.data)

@dp.callback_query(lambda c: c.data and c.data.startswith("refresh_stats_"))
async def process_refresh_specific_stats(callback_query: types.CallbackQuery):
    if not callback_query.data:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
        
    category = callback_query.data.replace("refresh_", "")
    await handlers.handle_refresh_stats(callback_query, category)

@dp.callback_query(lambda c: c.data and (c.data.startswith("system_") or c.data.startswith("bandwidth_") or c.data.startswith("nodes_")))
async def process_stats_subcategory(callback_query: types.CallbackQuery):
    if not callback_query.data:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
        
    await handlers.handle_stats_subcategory(callback_query, callback_query.data)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∏–∫–æ–≤ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º –∫–Ω–æ–ø–∫–∞–º
@dp.callback_query(lambda c: c.data == "page_info")
async def process_page_info(callback_query: types.CallbackQuery):
    await callback_query.answer()

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö callback
@dp.callback_query()
async def catch_all_callback(callback_query: types.CallbackQuery):
    logging.warning(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π callback: {callback_query.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id}")
    await callback_query.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())